e4snap: add snap clone file support

snapclone file is used to support writable snapshot.
If an user wants to modify a snapshot, a snapclone file
is created and mounted via loop, the snapclone file stores
the diff between original snapshot and written snapshot.
diff --git a/fs/ext4/Kconfig b/fs/ext4/Kconfig
index 739ecc9..ee33398 100644
--- a/fs/ext4/Kconfig
+++ b/fs/ext4/Kconfig
@@ -185,6 +185,15 @@ config EXT4_FS_SNAPSHOT_FILE
 	  Snapshot files are marked with the snapfile flag and have special
 	  read-only address space ops.
 
+config EXT4_FS_SNAPCLONE_FILE
+	bool "snapclone file"
+	depends on EXT4_FS_SNAPSHOT
+	default y
+	help
+	  Ext4 snapclone implementation as a file inside the file system.
+	  Snapshot clones are marked with the snapclone flag and have special
+	  address space ops supporting writable snapshot.
+
 config EXT4_FS_SNAPSHOT_FILE_READ
 	bool "snapshot file - read through to block device"
 	depends on EXT4_FS_SNAPSHOT_FILE
diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 0e8eef5..30d646f 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -472,12 +472,27 @@ struct flex_groups {
 #define EXT4_SNAPFILE_FL		0x01000000 /* snapshot file */
 #define EXT4_SNAPFILE_DELETED_FL	0x04000000 /* snapshot is deleted */
 #define EXT4_SNAPFILE_SHRUNK_FL		0x08000000 /* snapshot was shrunk */
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+#define EXT4_SNAPCLONE_FL		0x10000000 /* snapshot file */
+#endif
 /* end of snapshot flags */
 #endif
 #define EXT4_RESERVED_FL		0x80000000 /* reserved for ext4 lib */
 
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_FILE
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+#define EXT4_FL_USER_VISIBLE		0x114BDFFF /* User visible flags */
+#define EXT4_FL_USER_MODIFIABLE		0x114B80FF /* User modifiable flags */
+
+/* Flags that should be inherited by new inodes from their parent. */
+#define EXT4_FL_INHERITED (EXT4_SECRM_FL | EXT4_UNRM_FL | EXT4_COMPR_FL |\
+			   EXT4_SYNC_FL | EXT4_IMMUTABLE_FL | EXT4_APPEND_FL |\
+			   EXT4_NODUMP_FL | EXT4_NOATIME_FL |\
+			   EXT4_NOCOMPR_FL | EXT4_JOURNAL_DATA_FL |\
+			   EXT4_NOTAIL_FL | EXT4_DIRSYNC_FL |\
+			   EXT4_SNAPFILE_FL | EXT4_SNAPCLONE_FL)
 
+#else
 #define EXT4_FL_USER_VISIBLE		0x014BDFFF /* User visible flags */
 #define EXT4_FL_USER_MODIFIABLE		0x014B80FF /* User modifiable flags */
 
@@ -487,6 +502,7 @@ struct flex_groups {
 			   EXT4_NODUMP_FL | EXT4_NOATIME_FL |\
 			   EXT4_NOCOMPR_FL | EXT4_JOURNAL_DATA_FL |\
 			   EXT4_NOTAIL_FL | EXT4_DIRSYNC_FL | EXT4_SNAPFILE_FL)
+#endif
 #else
 #define EXT4_FL_USER_VISIBLE		0x004BDFFF /* User visible flags */
 #define EXT4_FL_USER_MODIFIABLE		0x004B80FF /* User modifiable flags */
@@ -548,6 +564,9 @@ enum {
 	EXT4_INODE_SNAPFILE_DELETED = 26,	/* Snapshot is deleted */
 	EXT4_INODE_SNAPFILE_SHRUNK = 27,	/* Snapshot was shrunk */
 #endif
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+	EXT4_INODE_SNAPCLONE = 28,	/* Snapclone file/dir */
+#endif
 	EXT4_INODE_RESERVED	= 31,	/* reserved for ext4 lib */
 };
 
@@ -735,6 +754,9 @@ enum {
 #endif
 #define EXT4_IOC_MOVE_EXT		_IOWR('f', 15, struct move_extent)
 #define EXT4_IOC_RESIZE_FS		_IOW('f', 16, __u64)
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+#define EXT4_IOC_SNAPCLONE		_IOW('f', 17, long)
+#endif
 
 #if defined(__KERNEL__) && defined(CONFIG_COMPAT)
 /*
@@ -1079,6 +1101,9 @@ struct ext4_inode_info {
 #define EXT4_FLAGS_IS_SNAPSHOT		0x0010 /* Is a snapshot image */
 #define EXT4_FLAGS_FIX_SNAPSHOT		0x0020 /* Corrupted snapshot */
 #define EXT4_FLAGS_FIX_EXCLUDE		0x0040 /* Bad exclude bitmap */
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+#define EXT4_FLAGS_IS_SNAPCLONE		0x0080 /* Is a snapclone image */
+#endif
 
 #define EXT4_SET_FLAGS(sb, mask)				 \
 	do {							 \
@@ -1509,6 +1534,7 @@ enum {
 	EXT4_SNAPSTATE_SHRUNK = 5,	/* snapshot was shrunk (h) */
 	EXT4_SNAPSTATE_OPEN = 6,	/* snapshot is mounted (o) */
 	EXT4_SNAPSTATE_TAGGED = 7,	/* snapshot is tagged  (t) */
+	EXT4_SNAPSTATE_CLONED = 8,	/* snapshot is cloned  (c) */
 	EXT4_SNAPSTATE_LAST
 #endif
 };
diff --git a/fs/ext4/file.c b/fs/ext4/file.c
index 0e6e33f..51cbfde 100644
--- a/fs/ext4/file.c
+++ b/fs/ext4/file.c
@@ -50,6 +50,7 @@ static int ext4_release_file(struct inode *inode, struct file *filp)
 		ext4_discard_preallocations(inode);
 		up_write(&EXT4_I(inode)->i_data_sem);
 	}
+
 	if (is_dx(inode) && filp->private_data)
 		ext4_htree_free_dir_info(filp->private_data);
 
diff --git a/fs/ext4/ialloc.c b/fs/ext4/ialloc.c
index 50248e6..767f424 100644
--- a/fs/ext4/ialloc.c
+++ b/fs/ext4/ialloc.c
@@ -933,8 +933,14 @@ got:
 		 * Set extent flag only for non-snapshot file, directory
 		 * and normal symlink
 		 */
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_FILE
+		if ((S_ISREG(mode) && !ext4_snapshot_file(inode) &&
+		     !ext4_snapclone_file(inode)) ||
+		    S_ISDIR(mode) || S_ISLNK(mode)) {
+#else
 		if ((S_ISREG(mode) && !ext4_snapshot_file(inode)) ||
 				S_ISDIR(mode) || S_ISLNK(mode)) {
+#endif
 #else
 		/* set extent flag only for directory, file and normal symlink*/
 		if (S_ISDIR(mode) || S_ISREG(mode) || S_ISLNK(mode)) {
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 6d876c8..ad0ac61 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -171,6 +171,10 @@ void ext4_evict_inode(struct inode *inode)
 			filemap_write_and_wait(&inode->i_data);
 		}
 		truncate_inode_pages(&inode->i_data, 0);
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+		if (ext4_snapclone_file(inode) && ext4_snapshot_list(inode))
+			ext4_snapclone_destroy(inode);
+#endif
 		goto no_delete;
 	}
 
@@ -767,6 +771,10 @@ int ext4_get_block_mow(struct inode *inode, sector_t iblock,
 {
 	int flags = create ? EXT4_GET_BLOCKS_CREATE : 0;
 
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+	if (ext4_snapclone_file(inode))
+		iblock = SNAPSHOT_IBLOCK(iblock);
+#endif
 	if (ext4_snapshot_should_move_data(inode))
 		flags |= EXT4_GET_BLOCKS_MOVE_ON_WRITE;
 	return _ext4_get_block(inode, iblock, bh, flags);
@@ -1000,8 +1008,15 @@ static void ext4_snapshot_write_begin(struct inode *inode,
 	 * guarantee this we have to know that the transaction is not restarted.
 	 * Can we count on that?
 	 */
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+	if ((!EXT4_SNAPSHOTS(inode->i_sb) ||
+	    !ext4_snapshot_should_move_data(inode)) &&
+	    !(ext4_snapclone_file(inode)))
+
+#else
 	if (!EXT4_SNAPSHOTS(inode->i_sb) ||
 	    !ext4_snapshot_should_move_data(inode))
+#endif
 		return;
 
 	if (!page_has_buffers(page))
@@ -1011,7 +1026,7 @@ static void ext4_snapshot_write_begin(struct inode *inode,
 	/*
 	 * make sure that get_block() is called even if the buffer is
 	 * mapped, but not if it is already a part of any transaction.
-	 * in data=ordered,the only mode supported by ext4, all dirty
+	 * in data=ordered,the only mode supported by ext4 snapshot, all dirty
 	 * data buffers are flushed on snapshot take via freeze_fs()
 	 * API.
 	 */
@@ -1753,6 +1768,10 @@ static void mpage_da_map_and_submit(struct mpage_da_data *mpd)
 	 * EXT4_GET_BLOCKS_DELALLOC_RESERVE so the delalloc accounting
 	 * variables are updated after the blocks have been allocated.
 	 */
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_HOOKS_DATA
+	if (ext4_snapclone_file(inode))
+		next = SNAPSHOT_IBLOCK(next);
+#endif
 	map.m_lblk = next;
 	map.m_len = max_blocks;
 	get_blocks_flags = EXT4_GET_BLOCKS_CREATE;
@@ -2054,6 +2073,10 @@ static int ext4_da_get_block_prep(struct inode *inode, sector_t iblock,
 	BUG_ON(create == 0);
 	BUG_ON(bh->b_size != inode->i_sb->s_blocksize);
 
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+	if (ext4_snapclone_file(inode))
+		iblock = SNAPSHOT_IBLOCK(iblock);
+#endif
 	map.m_lblk = iblock;
 	map.m_len = 1;
 
@@ -3064,6 +3087,11 @@ static int ext4_get_block_write(struct inode *inode, sector_t iblock,
 		   inode->i_ino, create);
 	if (ext4_snapshot_should_move_data(inode))
 		flags |= EXT4_GET_BLOCKS_MOVE_ON_WRITE;
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+	if (ext4_snapclone_file(inode))
+		iblock = SNAPSHOT_IBLOCK(iblock);
+#endif
+#endif
 	return _ext4_get_block(inode, iblock, bh_result, flags);
 #else
 	ext4_debug("ext4_get_block_write: inode %lu, create flag %d\n",
@@ -3408,6 +3436,25 @@ static const struct address_space_operations ext4_da_aops = {
 	.is_partially_uptodate  = block_is_partially_uptodate,
 	.error_remove_page	= generic_error_remove_page,
 };
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+static const struct address_space_operations ext4_snapclone_aops = {
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_FILE_READ
+	.readpage		= ext4_snapshot_readpage,
+#else
+	.readpage		= ext4_readpage,
+	.readpages		= ext4_readpages,
+#endif
+	.writepage		= ext4_writepage,
+	.writepages		= ext4_da_writepages,
+	.write_begin		= ext4_da_write_begin,
+	.write_end		= ext4_da_write_end,
+	.bmap			= ext4_bmap,
+	.invalidatepage		= ext4_da_invalidatepage,
+	.releasepage		= ext4_releasepage,
+};
+
+#endif
+
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_FILE
 static int ext4_no_writepage(struct page *page,
 				struct writeback_control *wbc)
@@ -3448,6 +3495,11 @@ void ext4_set_aops(struct inode *inode)
 		inode->i_mapping->a_ops = &ext4_snapfile_aops;
 	else
 #endif
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+	if (ext4_snapclone_file(inode))
+		inode->i_mapping->a_ops = &ext4_snapclone_aops;
+	else
+#endif
 	if (ext4_should_order_data(inode) &&
 		test_opt(inode->i_sb, DELALLOC))
 		inode->i_mapping->a_ops = &ext4_da_aops;
@@ -4078,7 +4130,11 @@ struct inode *ext4_iget(struct super_block *sb, unsigned long ino)
 		ei->i_data[block] = raw_inode->i_block[block];
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_FILE_STORE
 	/* snapshot on-disk list is stored in snapshot inode on-disk version */
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+	if (ext4_snapshot_file(inode) || ext4_snapclone_file(inode)) {
+#else
 	if (ext4_snapshot_file(inode)) {
+#endif
 		ei->i_next_snapshot_ino =
 			le32_to_cpu(raw_inode->i_disk_version);
 		/*
@@ -4091,6 +4147,13 @@ struct inode *ext4_iget(struct super_block *sb, unsigned long ino)
 #endif
 	INIT_LIST_HEAD(&ei->i_orphan);
 
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+	if (ext4_snapclone_file(inode) && ext4_snapshot_list(inode)) {
+		ret = ext4_snapclone_load(inode);
+		if (ret)
+			goto bad_inode;
+	}
+#endif
 	/*
 	 * Set transaction id's of transactions that have to be committed
 	 * to finish f[data]sync. We set them to currently running transaction
@@ -4361,7 +4424,11 @@ static int ext4_do_update_inode(handle_t *handle,
 			raw_inode->i_block[block] = ei->i_data[block];
 
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_FILE_STORE
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+	if (ext4_snapshot_file(inode) || ext4_snapclone_file(inode)) {
+#else
 	if (ext4_snapshot_file(inode)) {
+#endif
 		/*
 		 * Snapshot on-disk list overrides snapshot on-disk version.
 		 * Snapshot files are not writable and have a fixed version.
diff --git a/fs/ext4/ioctl.c b/fs/ext4/ioctl.c
index e239d67..e7286fa 100644
--- a/fs/ext4/ioctl.c
+++ b/fs/ext4/ioctl.c
@@ -87,13 +87,22 @@ long ext4_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 				goto flags_out;
 		}
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_CTL
-
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+		/*
+		 * The SNAPFILE and SNAPCLONE flag can only be changed on directories by
+		 * the relevant capability.
+		 * It can only be inherited by regular files.
+		 */
+		if ((flags ^ oldflags) &
+		    (EXT4_SNAPFILE_FL | EXT4_SNAPCLONE_FL)) {
+#else
 		/*
 		 * The SNAPFILE flag can only be changed on directories by
 		 * the relevant capability.
 		 * It can only be inherited by regular files.
 		 */
 		if ((flags ^ oldflags) & EXT4_SNAPFILE_FL) {
+#endif
 			if (!S_ISDIR(inode->i_mode)) {
 				err = -ENOTDIR;
 				goto flags_out;
@@ -203,8 +212,13 @@ flags_out:
 		 * Snapshot file state flags can only be changed by
 		 * the relevant capability and under snapshot_mutex lock.
 		 */
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+		if ((!ext4_snapshot_file(inode) &&
+		     !ext4_snapclone_file(inode)) || !capable(CAP_SYS_RESOURCE))
+#else
 		if (!ext4_snapshot_file(inode) ||
 				!capable(CAP_SYS_RESOURCE))
+#endif
 			return -EPERM;
 
 		/* update snapshot 'open' flag under i_mutex */
@@ -236,8 +250,14 @@ flags_out:
 		err = ext4_reserve_inode_write(handle, inode, &iloc);
 		if (err)
 			goto snapflags_err;
-
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+		if (ext4_snapshot_file(inode))
+			err = ext4_snapshot_set_flags(handle, inode, flags);
+		else
+			err = ext4_snapclone_set_flags(handle, inode, flags);
+#else 
 		err = ext4_snapshot_set_flags(handle, inode, flags);
+#endif
 		if (err)
 			goto snapflags_err;
 
@@ -269,6 +289,40 @@ snapflags_out:
 		return err;
 	}
 #endif
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+	case EXT4_IOC_SNAPCLONE: {
+		struct file *snapshot_filp;
+		unsigned int snapshot_fd;
+		int err;
+
+		if (!inode_owner_or_capable(inode))
+			return -EACCES;
+
+		err = mnt_want_write(filp->f_path.mnt);
+		if (err)
+			return err;
+
+		if (get_user(snapshot_fd, (int __user *) arg))
+			return -EFAULT;
+
+		if (!ext4_snapclone_file(inode) || !capable(CAP_SYS_RESOURCE))
+			return -EPERM;
+
+		snapshot_filp = fget(snapshot_fd);
+		if (!snapshot_filp)
+			return -EINVAL;
+
+		if (!ext4_snapshot_file(snapshot_filp->f_dentry->d_inode))
+			return -EPERM;
+
+		mutex_lock(&inode->i_mutex);
+		err = ext4_snapclone_take(inode,
+					  snapshot_filp->f_dentry->d_inode);
+		fput(snapshot_filp);
+		mutex_unlock(&inode->i_mutex);
+		return err;
+	}
+#endif
 	case EXT4_IOC_GETVERSION:
 	case EXT4_IOC_GETVERSION_OLD:
 		return put_user(inode->i_generation, (int __user *) arg);
diff --git a/fs/ext4/snapshot.h b/fs/ext4/snapshot.h
index 9b91f16..4d7c6ef 100644
--- a/fs/ext4/snapshot.h
+++ b/fs/ext4/snapshot.h
@@ -417,6 +417,15 @@ extern int ext4_snapshot_update(struct super_block *sb, int cleanup,
 extern void ext4_snapshot_destroy(struct super_block *sb);
 #endif
 
+#ifdef CONFIG_EXT4_FS_SNAPSHOT_FILE
+extern int ext4_snapclone_take(struct inode *clone_inode,
+			       struct inode *snap_inode);
+extern long ext4_snapclone_load(struct inode *);
+extern void ext4_snapclone_destroy(struct inode *);
+extern int ext4_snapclone_set_flags(handle_t *handle, struct inode *inode,
+				    unsigned int flags);
+#endif
+
 static inline int init_ext4_snapshot(void)
 {
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_JOURNAL_CACHE
@@ -458,6 +467,22 @@ static inline int ext4_snapshot_list(struct inode *inode)
 	return ext4_test_inode_snapstate(inode, EXT4_SNAPSTATE_LIST);
 }
 #endif
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+/* tests if @inode is cloned */
+static inline int ext4_snapshot_cloned(struct inode *inode)
+{
+	return ext4_test_inode_snapstate(inode, EXT4_SNAPSTATE_CLONED);
+}
+
+/* tests if @inode is a snapclone file */
+static inline int ext4_snapclone_file(struct inode *inode)
+{
+	if (!S_ISREG(inode->i_mode))
+		/* a snapclone directory */
+		return 0;
+	return ext4_test_inode_flag(inode, EXT4_INODE_SNAPCLONE);
+}
+#endif
 
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_FILE
 /*
diff --git a/fs/ext4/snapshot_ctl.c b/fs/ext4/snapshot_ctl.c
index 330d5a3..92168f9 100644
--- a/fs/ext4/snapshot_ctl.c
+++ b/fs/ext4/snapshot_ctl.c
@@ -387,6 +387,72 @@ void ext4_snapshot_get_flags(struct inode *inode, struct file *filp)
 		ext4_clear_inode_snapstate(inode, EXT4_SNAPSTATE_SHRUNK);
 }
 
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+/*
+ * ON LIST flag is set to make read through happy.
+ */
+static int ext4_snapclone_enable(struct inode *inode)
+{
+	int err;
+	err = ext4_snapclone_load(inode);
+	if (err)
+		return err;
+	/*
+	 * set i_size to block device size to enable loop device mount
+	 */
+	SNAPSHOT_SET_ENABLED(inode);
+	ext4_set_inode_snapstate(inode, EXT4_SNAPSTATE_ENABLED);
+	ext4_set_inode_snapstate(inode, EXT4_SNAPSTATE_LIST);
+
+	/* Don't need i_size_read because we hold i_mutex */
+	snapshot_debug(4, "setting snapclone inode (%lu) i_size to (%lld)\n",
+			inode->i_ino, inode->i_size);
+	snapshot_debug(1, "snapclone inode (%lu) enabled\n", inode->i_ino);
+	return 0;
+}
+
+static int ext4_snapclone_disable(struct inode *inode)
+{
+	/* reset i_size and invalidate page cache */
+	SNAPSHOT_SET_DISABLED(inode);
+	ext4_clear_inode_snapstate(inode, EXT4_SNAPSTATE_ENABLED);
+	ext4_clear_inode_snapstate(inode, EXT4_SNAPSTATE_LIST);
+	ext4_snapclone_destroy(inode);
+	/* Don't need i_size_read because we hold i_mutex */
+	snapshot_debug(4, "setting snapclone inode (%lu) i_size to (%lld)\n",
+		       inode->i_ino, inode->i_size);
+	snapshot_debug(1, "snapclone inode (%lu) disabled\n", inode->i_ino);
+	return 0;
+}
+
+/*
+ * ext4_snapclone_set_flags() monitors snapshot state changes
+ * Called from ext4_ioctl() under i_mutex and snapshot_mutex
+ */
+int ext4_snapclone_set_flags(handle_t *handle, struct inode *inode,
+			     unsigned int flags)
+{
+	unsigned int oldflags = ext4_get_snapstate_flags(inode);
+	int err = 0;
+
+	if ((flags ^ oldflags) & 1UL<<EXT4_SNAPSTATE_ENABLED) {
+		/* enabled/disabled the snapshot during transaction */
+		if (flags & 1UL<<EXT4_SNAPSTATE_ENABLED)
+			err = ext4_snapclone_enable(inode);
+		else
+			err = ext4_snapclone_disable(inode);
+	}
+
+	/*
+	 * retake reserve inode write from ext4_ioctl() and mark inode
+	 * dirty
+	 */
+	if (!err)
+		err = ext4_mark_inode_dirty(handle, inode);
+	return err;
+}
+
+#endif
 /*
  * ext4_snapshot_set_flags() monitors snapshot state changes
  * Called from ext4_ioctl() under i_mutex and snapshot_mutex
@@ -563,6 +629,36 @@ static ext4_fsblk_t ext4_get_inode_block(struct super_block *sb,
 	return block;
 }
 
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+/*
+ * ext4_is_empty_file() checks if @inode is an empty file.
+ * return 1 if empty, 0 otherwise.
+ */
+static int ext4_is_empty_file(struct inode *inode)
+{
+	struct ext4_inode_info *ei = EXT4_I(inode);
+	int i;
+
+	/* verify that no inode blocks are allocated */
+	for (i = 0; i < EXT4_N_BLOCKS; i++) {
+		if (ei->i_data[i])
+			break;
+	}
+	/* Don't need i_size_read because we hold i_mutex */
+	if (i != EXT4_N_BLOCKS ||
+		inode->i_size > 0 || ei->i_disksize > 0) {
+		snapshot_debug(1, "failed to create snapshot file (ino=%lu) "
+				"because it is not empty (i_data[%d]=%u, "
+				"i_size=%lld, i_disksize=%lld)\n",
+				inode->i_ino, i, ei->i_data[i],
+				inode->i_size, ei->i_disksize);
+		return 0;
+	}
+
+	return 1;
+}
+#endif
+
 /*
  * ext4_snapshot_create() initializes a snapshot file
  * and adds it to the list of snapshots
@@ -626,6 +722,10 @@ static int ext4_snapshot_create(struct inode *inode)
 		return -EINVAL;
 	}
 
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+	if (!ext4_is_empty_file(inode))
+		return -EINVAL;		
+#else
 	/* verify that no inode blocks are allocated */
 	for (i = 0; i < EXT4_N_BLOCKS; i++) {
 		if (ei->i_data[i])
@@ -641,6 +741,7 @@ static int ext4_snapshot_create(struct inode *inode)
 				inode->i_size, ei->i_disksize);
 		return -EINVAL;
 	}
+#endif
 
 	/*
 	 * Take a reference to the small transaction that started in
@@ -893,6 +994,132 @@ static char *copy_inode_block_name[COPY_INODE_BLOCKS_NUM] = {
 };
 #endif
 
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+/*
+ * ext4_snapclone_take() makes a new snapshot file
+ * into the active snapshot
+ *
+ * Called from ext4_ioctl() under i_mutex
+ */
+int ext4_snapclone_take(struct inode *clone_inode, struct inode *snap_inode)
+{
+	struct ext4_iloc iloc;
+	struct buffer_head *snap_es_bh = NULL, *clone_es_bh = NULL;
+	struct ext4_super_block *es = NULL;
+	struct super_block *sb = clone_inode->i_sb;
+	struct ext4_sb_info *sbi = EXT4_SB(sb);
+	handle_t *handle;
+	int err = -EIO, ret;
+
+	if (!ext4_is_empty_file(clone_inode))
+		return -EINVAL;
+
+	/*
+	 * Get super block of the snapshot, we need to copy it to snapclone and
+	 * fix IS_SNAPSHOT flag, so that snapclone can be mounted.
+	 */
+
+	snap_es_bh = ext4_bread(NULL, snap_inode, SNAPSHOT_IBLOCK(0),
+				SNAPMAP_READ, &err);
+	if (!snap_es_bh || snap_es_bh->b_blocknr == 0) {
+		snapshot_debug(1, "warning: super block of snapshot (%u) not "
+			       "allocated\n", snap_inode->i_generation);
+		goto out_err;
+	}
+
+	/*
+	 * Take a reference to the small transaction that started in
+	 * ext4_ioctl() We will extend or restart this transaction as we go
+	 * along.  journal_start(n > 1) would not have increase the buffer
+	 * credits.
+	 */
+	handle = ext4_journal_start(clone_inode, 1);
+	err = ext4_reserve_inode_write(handle, clone_inode, &iloc);
+	if (err)
+		return err;
+
+	snapshot_debug(4, "add clone inode %lu to snap inode %lu\n",
+		       clone_inode->i_ino, snap_inode->i_ino);
+	/* pre-allocate and zero out [d,t]ind blocks */
+	err = ext4_snapshot_preallocate(handle, clone_inode,
+					SNAPSHOT_BLOCKS(snap_inode));
+	if (err) {
+		snapshot_debug(1, "failed to pre-allocate tind blocks"
+			       " for snapclone (%lu)\n", clone_inode->i_ino);
+		goto out_handle;
+	}
+
+	/* allocate super block for snapclone file */
+	err = extend_or_restart_transaction_inode(handle, clone_inode,
+			EXT4_DATA_TRANS_BLOCKS(sb));
+	if (err)
+		goto out_handle;
+	err = ext4_snapshot_map_blocks(handle, clone_inode, 0, 1,
+				       NULL, SNAPMAP_WRITE);
+	if (err <= 0) {
+		snapshot_debug(1, "failed to allocate super block for "
+			       "snapclone (%lu)\n", clone_inode->i_ino);
+		if (err)
+			err = -EIO;
+		goto out_handle;
+	}
+
+	/*
+	 * Link clone inode to snap inode, so that we can find snap inode via
+	 * clone inode.
+	 */
+	NEXT_SNAPSHOT(clone_inode) = snap_inode->i_ino;
+
+	/* record the file system size in the clone inode disksize field */
+	SNAPSHOT_SET_BLOCKS(clone_inode, SNAPSHOT_BLOCKS(snap_inode));
+
+	err = ext4_mark_inode_dirty(handle, clone_inode);
+
+	/* Link clone inode to snap inode via prev. */
+	if (err)
+		goto out_handle;
+	EXT4_I(clone_inode)->i_snaplist.prev = &EXT4_I(snap_inode)->i_snaplist;
+
+	/* get super block of snapclone */
+	clone_es_bh = ext4_getblk(NULL, clone_inode, SNAPSHOT_IBLOCK(0),
+				 SNAPMAP_READ, &err);
+
+	if (!clone_es_bh || clone_es_bh->b_blocknr == 0) {
+		snapshot_debug(1, "warning: super block of snapclone inode %lu "
+			       "not allocated\n", clone_inode->i_ino);
+		err = -EIO;
+		goto out_handle;
+	} else {
+		snapshot_debug(4, "super block of snapclone (%lu) mapped to "
+			       "block (%lld)\n", clone_inode->i_ino,
+			       (long long)clone_es_bh->b_blocknr);
+		es = (struct ext4_super_block *)(clone_es_bh->b_data +
+						  ((char *)sbi->s_es -
+						   sbi->s_sbh->b_data));
+	}
+
+	/*copy super block */
+	lock_buffer(clone_es_bh);
+	memcpy(clone_es_bh->b_data, snap_es_bh->b_data, sb->s_blocksize);
+	/* clear the IS_SNAPSHOT flag */
+	es->s_flags &= ~cpu_to_le32(EXT4_FLAGS_IS_SNAPSHOT);
+	set_buffer_uptodate(clone_es_bh);
+	unlock_buffer(clone_es_bh);
+	mark_buffer_dirty(clone_es_bh);
+	sync_dirty_buffer(clone_es_bh);
+
+out_handle:
+	ret = ext4_journal_stop(handle);
+	if (!err)
+		err = ret;
+
+out_err:
+	brelse(snap_es_bh);
+	brelse(clone_es_bh);
+	return err;
+}
+#endif
+
 /*
  * ext4_snapshot_take() makes a new snapshot file
  * into the active snapshot
@@ -1341,6 +1568,15 @@ static int ext4_snapshot_delete(struct inode *inode)
 		return -EINVAL;
 	}
 
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+	if (ext4_test_inode_snapstate(inode, EXT4_SNAPSTATE_CLONED)) {
+		snapshot_debug(1, "delete of cloned snapshot (%u) "
+			       "is not permitted\n",
+			       inode->i_generation);
+		return -EPERM;
+	}
+
+#endif
 	if (ext4_test_inode_snapstate(inode, EXT4_SNAPSTATE_ENABLED)) {
 		snapshot_debug(1, "delete of enabled snapshot (%u) "
 			       "is not permitted\n",
@@ -1845,6 +2081,55 @@ static int ext4_snapshot_cleanup(struct inode *inode, struct inode *used_by,
 
 #endif
 #endif
+
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+/*
+ * ext4_snapclone_load - load the on-disk snapclone list to memory.
+ * Start with snapclone and continue to older snapshots.
+ * If snapshot load fails before active snapshot, force read-only mount.
+ * If snapshot load fails after active snapshot, allow read-write mount.
+ * Called from ext4_iget() under sb_lock during mount time.
+ *
+ * Return values:
+ * = 0 - on-disk snapshot list is empty or active snapshot loaded
+ * < 0 - error loading active snapshot
+ */
+long ext4_snapclone_load(struct inode *inode) {
+	struct inode *next_inode;
+
+	/*
+	 * Currently, recursive snapclone is not support, and snapshot is
+	 * loaded at mount time.
+	 */
+	next_inode = ext4_iget(inode->i_sb, NEXT_SNAPSHOT(inode));
+	if (IS_ERR(next_inode)) {
+		snapshot_debug(1, "fail to load snap inode %u.\n",
+			       NEXT_SNAPSHOT(inode));
+		return PTR_ERR(next_inode);
+	}
+	EXT4_I(inode)->i_snaplist.prev = &EXT4_I(next_inode)->i_snaplist;
+	snapshot_debug(1, "clone inode %lu loaded linking snap inode %lu\n",
+		       inode->i_ino, next_inode->i_ino);
+
+	return 0;
+}
+
+/*
+ * ext4_snapclone_destroy() releases refrerence to snapshot
+ * Called from ext4_clear_inode() 
+ * This function cannot fail.
+ */
+void ext4_snapclone_destroy(struct inode *inode) {
+	struct ext4_inode_info *ei;
+	ei = list_entry(EXT4_I(inode)->i_snaplist.prev,
+			struct ext4_inode_info, i_snaplist);
+	snapshot_debug(1, "unlinking snap inode %lu from clone inode %lu\n",
+		       ei->vfs_inode.i_ino, inode->i_ino);
+	iput(&ei->vfs_inode);
+	EXT4_I(inode)->i_snaplist.prev = &EXT4_I(inode)->i_snaplist;
+}
+
+#endif
 /*
  * Snapshot constructor/destructor
  */
diff --git a/fs/ext4/snapshot_inode.c b/fs/ext4/snapshot_inode.c
index 796b355..dd117bc 100644
--- a/fs/ext4/snapshot_inode.c
+++ b/fs/ext4/snapshot_inode.c
@@ -645,19 +645,27 @@ static int ext4_snapshot_get_block_access(struct inode *inode,
 		return 0;
 
 #ifdef CONFIG_EXT4_FS_SNAPSHOT_LIST_READ
-	if (prev == &ei->i_snaplist)
+	if (prev == &ei->i_snaplist) {
 		/* not on snapshots list? */
+		snapshot_debug(8, "snapshot is not on snapshot list\n");
 		return -EIO;
+	}
 
-	if (prev == &EXT4_SB(inode->i_sb)->s_snapshot_list)
+	if (prev == &EXT4_SB(inode->i_sb)->s_snapshot_list) {
 		/* active snapshot not found on list? */
+		snapshot_debug(8, "no active snapshot is found\n");
 		return -EIO;
+	}
 
 	/* read through to prev snapshot on the list */
 	ei = list_entry(prev, struct ext4_inode_info, i_snaplist);
 	*prev_snapshot = &ei->vfs_inode;
-
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+	if (!ext4_snapshot_file(*prev_snapshot) &&
+	    !ext4_snapclone_file(*prev_snapshot))
+#else
 	if (!ext4_snapshot_file(*prev_snapshot))
+#endif
 		/* non snapshot file on the list? */
 		return -EIO;
 
@@ -990,3 +998,9 @@ int ext4_snapshot_readpage(struct file *file, struct page *page)
 	return ext4_read_full_page(page, ext4_snapshot_get_block);
 }
 #endif
+
+#ifdef CONFIG_EXT4_FS_SNAPCLONE_FILE
+int ext4_snapclone_writepage(struct file *file, struct page *page)
+{
+}
+#endif
